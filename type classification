{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNbLXls/u1hZ1jMYdYpyJo7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HyunaJ/nextjs-blog/blob/main/HyunaJ/SEproject-Medihair/AI/HairLoss_classification.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vpaoGl7P1F86"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import cv2\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
        "from tensorflow.keras.preprocessing.image import img_to_array, load_img\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "\n",
        "# Load the dataset from CSV\n",
        "df = pd.read_csv(\"/kaggle/input/dataset-of-bald-people/bald_people.csv\", sep=';')\n",
        "\n",
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Preprocess the data\n",
        "X = []\n",
        "y = []\n",
        "for index, row in df.iterrows():\n",
        "    path='/kaggle/input/dataset-of-bald-people/'\n",
        "    image = cv2.imread(path+row['images'])\n",
        "    image = cv2.resize(image, (224, 224))  # Resize image to desired dimensions\n",
        "    image = img_to_array(image)\n",
        "    X.append(image)\n",
        "    y.append(row['type'])\n",
        "\n",
        "X = np.array(X)\n",
        "y = np.array(y)\n",
        "\n",
        "# Normalize pixel values\n",
        "X = X / 255.0\n",
        "\n",
        "\n",
        "# Encode the labels\n",
        "label_encoder = LabelEncoder()\n",
        "encoded_labels = label_encoder.fit_transform(y)\n",
        "\n",
        "# Convert labels to one-hot encoding\n",
        "y = to_categorical(encoded_labels)\n",
        "\n",
        "# Convert labels to categorical\n",
        "#y = to_categorical(y)"
      ],
      "metadata": {
        "id": "rnraC8Zoe_62"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Define the deep learning model\n",
        "model = Sequential()\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dense(6, activation='softmax'))  # num_classes is the number of unique types\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "model.fit(X_train, y_train, batch_size=32, epochs=25, validation_data=(X_test, y_test))\n",
        "\n",
        "# Evaluate the model\n",
        "loss, accuracy = model.evaluate(X_test, y_test)\n",
        "print(f\"Test Loss: {loss}\")\n",
        "print(f\"Test Accuracy: {accuracy}\")"
      ],
      "metadata": {
        "id": "d8oib2edfOAT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2\n",
        "import numpy as np\n",
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing.image import img_to_array, load_img\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the trained model\n",
        "#model = load_model(\"your_model.h5\")\n",
        "\n",
        "# Load and preprocess the new image\n",
        "new_image_path = \"/kaggle/input/dataset-of-bald-people/images/eu.04a53e8d-0642-47ce-afed-0dce3d2e3b85.jpg\"\n",
        "new_image = cv2.imread(new_image_path)\n",
        "new_image = cv2.resize(new_image, (224, 224))  # Resize image to match training input shape\n",
        "new_image = img_to_array(new_image)\n",
        "new_image = np.expand_dims(new_image, axis=0)\n",
        "new_image = new_image / 255.0\n",
        "\n",
        "# Make predictions\n",
        "predictions = model.predict(new_image)\n",
        "predicted_label = np.argmax(predictions)\n",
        "\n",
        "# Get the class label from the label encoder\n",
        "class_label = label_encoder.inverse_transform([predicted_label])\n",
        "\n",
        "print(\"Predicted Class:\", class_label[0])\n",
        "\n",
        "plt.imshow(cv2.cvtColor(cv2.imread(new_image_path), cv2.COLOR_BGR2RGB))\n",
        "plt.title(\"Predicted Class: \" + class_label[0])\n",
        "plt.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "NGJUQ246fbux"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dwyCMZ1nfkp0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
